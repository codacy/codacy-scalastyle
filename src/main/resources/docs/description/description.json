[
  {
    "patternId": "FileTabChecker",
    "title": "Prohibit tabs in a file",
    "description": "Prohibits from using tabs for indentation.",
    "timeToFix": 5
  },
  {
    "patternId": "WhitespaceEndOfLineChecker",
    "title": "Prohibit trailing whitespace",
    "description": "Prohibits whitespace on any line directly before the line end character(s).",
    "timeToFix": 5
  },
  {
    "patternId": "FileLineLengthChecker",
    "title": "Enforce line max length",
    "description": "Enforces the maximum characters length of each line.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "FileLineLengthChecker",
        "description": "Indicate the threshold of characters in a code line"
      }
    ]
  },
  {
    "patternId": "ClassNamesChecker",
    "title": "Enforce class naming convention",
    "description": "Enforces Scala class naming convention.",
    "timeToFix": 5
  },
  {
    "patternId": "ObjectNamesChecker",
    "title": "Enforce object naming convention",
    "description": "Enforces Scala object naming convention.",
    "timeToFix": 5
  },
  {
    "patternId": "PackageObjectNamesChecker",
    "title": "Enforce package object naming convention",
    "description": "Enforces Scala package object naming convention.",
    "timeToFix": 10
  },
  {
    "patternId": "EqualsHashCodeChecker",
    "title": "Enforce equals hashCode contract",
    "description": "Enforces that a class implements both equals and hashCode, if one of them is implemented.",
    "timeToFix": 5
  },
  {
    "patternId": "ParameterNumberChecker",
    "title": "Enforce max number of parameters",
    "description": "Enforces a maximum number of parameters for each method.",
    "timeToFix": 180,
    "parameters": [
      {
        "name": "ParameterNumberChecker",
        "description": "Indicate the threshold of parameters that a method can receive"
      }
    ]
  },
  {
    "patternId": "MagicNumberChecker",
    "title": "Prohibit magic numbers",
    "description": "Prohibits unnamed numerical constants.",
    "timeToFix": 10
  },
  {
    "patternId": "NoWhitespaceBeforeLeftBracketChecker",
    "title": "Prohibit whitespace before left bracket",
    "description": "Prohibits whitespace before left brackets.",
    "timeToFix": 5
  },
  {
    "patternId": "NoWhitespaceAfterLeftBracketChecker",
    "title": "Prohibit whitespace after left bracket",
    "description": "Prohibits whitespace after left brackets.",
    "timeToFix": 5
  },
  {
    "patternId": "ReturnChecker",
    "title": "Prohibit return statement",
    "description": "Prohibits usage of the return statement.",
    "timeToFix": 20
  },
  {
    "patternId": "NullChecker",
    "title": "Prohibit null literal",
    "description": "Prohibits usage of the null literal.",
    "timeToFix": 60
  },
  {
    "patternId": "NoCloneChecker",
    "title": "Prohibit overriding clone() method",
    "description": "Prohibits classes and objects from defining the clone() method.",
    "timeToFix": 120
  },
  {
    "patternId": "NoFinalizeChecker",
    "title": "Prohibit overriding finalize() method",
    "description": "Prohibits classes and objects from defining the finalize() method.",
    "timeToFix": 120
  },
  {
    "patternId": "CovariantEqualsChecker",
    "title": "Prohibit standalone covariant equals",
    "description": "Prohibits classes and objects from defining equals method without overriding equals(java.lang.Object).",
    "timeToFix": 10
  },
  {
    "patternId": "StructuralTypeChecker",
    "title": "Prohibit structural types",
    "description": "Prohibits structural types.",
    "timeToFix": 20
  },
  {
    "patternId": "CyclomaticComplexityChecker",
    "title": "Enforce cyclomatic complexity",
    "description": "Enforces code to have low cyclomatic complexity.",
    "timeToFix": 480
  },
  {
    "patternId": "UppercaseLChecker",
    "title": "Prohibit lowercase L in Long literals",
    "description": "Prohibits trailing lowercase L in Long literals.",
    "timeToFix": 5
  },
  {
    "patternId": "SimplifyBooleanExpressionChecker",
    "title": "Enforce simplification of boolean expressions",
    "description": "Enforces simplification of boolean expressions that contain boolean literals.",
    "timeToFix": 5
  },
  {
    "patternId": "IfBraceChecker",
    "title": "Enforce curly braces",
    "description": "Enforces curly braces around if blocks.",
    "timeToFix": 5
  },
  {
    "patternId": "MethodLengthChecker",
    "title": "Enforce max method length",
    "description": "Enforces a maximum number of statements for each method.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "MethodLengthChecker",
        "description": "Indicate the threshold of statements that a method should have"
      }
    ]
  },
  {
    "patternId": "MethodNamesChecker",
    "title": "Enforce method naming convention",
    "description": "Enforces Scala method naming convention.",
    "timeToFix": 5
  },
  {
    "patternId": "NumberOfMethodsInTypeChecker",
    "title": "Enforce max number of methods",
    "description": "Enforces a maximum number of methods per type.",
    "timeToFix": 180,
    "parameters": [
      {
        "name": "NumberOfMethodsInTypeChecker",
        "description": "Indicate the threshold of methods that a type should have"
      }
    ]
  },
  {
    "patternId": "PublicMethodsHaveTypeChecker",
    "title": "Enforce return type of public methods",
    "description": "Enforces declaration of explicit return type for public methods.",
    "timeToFix": 5
  },
  {
    "patternId": "WhileChecker",
    "title": "Prohibit while loops",
    "description": "Prohibits usage of while loops.",
    "timeToFix": 15
  },
  {
    "patternId": "VarFieldChecker",
    "title": "Prohibit mutable fields",
    "description": "Prohibits mutable fields in classes and objects.",
    "timeToFix": 60
  },
  {
    "patternId": "VarLocalChecker",
    "title": "Prohibit mutable variables",
    "description": "Prohibits mutable local variables.",
    "timeToFix": 60
  },
  {
    "patternId": "RedundantIfChecker",
    "title": "Prohibit redundant if statements",
    "description": "Prohibits redundant expressions that are easily replaced by a variant of the condition.",
    "timeToFix": 5
  },
  {
    "patternId": "DeprecatedJavaChecker",
    "title": "Prohibit Java's @Deprecated",
    "description": "Prohibits usage of Java @Deprecated.",
    "timeToFix": 5
  },
  {
    "patternId": "EmptyClassChecker",
    "title": "Prohibit empty class with braces",
    "description": "Prohibits empty class from having unnecessary braces.",
    "timeToFix": 5
  },
  {
    "patternId": "ClassTypeParameterChecker",
    "title": "Enforce single letter class parameter",
    "description": "Enforces class type parameter to be a single uppercase letter.",
    "timeToFix": 5
  },
  {
    "patternId": "UnderscoreImportChecker",
    "title": "Prohibit wildcard imports",
    "description": "Prohibits wildcard (underscore) imports.",
    "timeToFix": 5
  },
  {
    "patternId": "LowercasePatternMatchChecker",
    "title": "Prohibit lowercase match case",
    "description": "Prohibits case statement pattern match from being lowercase.",
    "timeToFix": 10
  },
  {
    "patternId": "MultipleStringLiteralsChecker",
    "title": "Prohibit duplicates string literals",
    "description": "Prohibits usage of duplicated string literals.",
    "timeToFix": 5
  },
  {
    "patternId": "ImportGroupingChecker",
    "title": "Prohibit scattered imports",
    "description": "Prohibits imports scattered across a file.",
    "timeToFix": 5
  },
  {
    "patternId": "BlockImportChecker",
    "title": "Prohibit block import",
    "description": "Prohibits block imports.",
    "timeToFix": 5
  },
  {
    "patternId": "ForBraceChecker",
    "title": "Enforce curly braces in for loops",
    "description": "Enforces usage of curly braces in for loops.",
    "timeToFix": 5
  },
  {
    "patternId": "ProcedureDeclarationChecker",
    "title": "Prohibit procedure style declarations",
    "description": "Prohibits methods declarations in procedure style.",
    "timeToFix": 5
  },
  {
    "patternId": "NotImplementedErrorUsage",
    "title": "Prohibit ??? operator",
    "description": "Prohibits the not implemented operator.",
    "timeToFix": 5
  },
  {
    "patternId": "NonASCIICharacterChecker",
    "title": "Prohibit Non ASCII Characters",
    "description": "Prohibit the use of Non-ASCII Characters since some editors are unfriendly to non ascii characters.",
    "timeToFix": 5
  },
  {
    "patternId": "FieldNamesChecker",
    "title": "Enforce consistent field names",
    "description": "Enforce that field names match a regular expression",
    "timeToFix": 5
  },
  {
    "patternId": "XmlLiteralChecker",
    "title": "Prohibit XML literals",
    "description": "Prohibit the use of XML literals",
    "timeToFix": 5
  }
]