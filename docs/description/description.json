[ {
  "patternId" : "FileTabChecker",
  "title" : "File Tab",
  "parameters" : [ ]
}, {
  "patternId" : "FileLengthChecker",
  "title" : "File Length",
  "parameters" : [ {
    "name" : "maxFileLength",
    "description" : "maxFileLength"
  } ]
}, {
  "patternId" : "HeaderMatchesChecker",
  "title" : "Header Matches",
  "parameters" : [ {
    "name" : "header",
    "description" : "header"
  }, {
    "name" : "regex",
    "description" : "regex"
  } ]
}, {
  "patternId" : "SpacesAfterPlusChecker",
  "title" : "Spaces After Plus",
  "parameters" : [ ]
}, {
  "patternId" : "WhitespaceEndOfLineChecker",
  "title" : "Whitespace End Of Line",
  "parameters" : [ {
    "name" : "ignoreWhitespaceLines",
    "description" : "ignoreWhitespaceLines"
  } ]
}, {
  "patternId" : "SpacesBeforePlusChecker",
  "title" : "Spaces Before Plus",
  "parameters" : [ ]
}, {
  "patternId" : "FileLineLengthChecker",
  "title" : "File Line Length",
  "parameters" : [ {
    "name" : "maxLineLength",
    "description" : "maxLineLength"
  }, {
    "name" : "tabSize",
    "description" : "tabSize"
  }, {
    "name" : "ignoreImports",
    "description" : "ignoreImports"
  } ]
}, {
  "patternId" : "ClassNamesChecker",
  "title" : "Class Names",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  } ]
}, {
  "patternId" : "ObjectNamesChecker",
  "title" : "Object Names",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  } ]
}, {
  "patternId" : "PackageNamesChecker",
  "title" : "Package Names",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  } ]
}, {
  "patternId" : "PackageObjectNamesChecker",
  "title" : "Package Object Names",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  } ]
}, {
  "patternId" : "EqualsHashCodeChecker",
  "title" : "Equals Hash Code",
  "parameters" : [ ]
}, {
  "patternId" : "IllegalImportsChecker",
  "title" : "Illegal Imports",
  "parameters" : [ {
    "name" : "illegalImports",
    "description" : "illegalImports"
  } ]
}, {
  "patternId" : "ParameterNumberChecker",
  "title" : "Parameter Number",
  "parameters" : [ {
    "name" : "maxParameters",
    "description" : "maxParameters"
  } ]
}, {
  "patternId" : "MagicNumberChecker",
  "title" : "Magic Number",
  "parameters" : [ {
    "name" : "ignore",
    "description" : "ignore"
  } ]
}, {
  "patternId" : "NoWhitespaceBeforeLeftBracketChecker",
  "title" : "No Whitespace Before Left Bracket",
  "parameters" : [ ]
}, {
  "patternId" : "NoWhitespaceAfterLeftBracketChecker",
  "title" : "No Whitespace After Left Bracket",
  "parameters" : [ ]
}, {
  "patternId" : "NoWhitespaceBeforeRightBracketChecker",
  "title" : "No Whitespace Before Right Bracket",
  "parameters" : [ ]
}, {
  "patternId" : "ReturnChecker",
  "title" : "Return",
  "parameters" : [ ]
}, {
  "patternId" : "NullChecker",
  "title" : "Null",
  "parameters" : [ {
    "name" : "allowNullChecks",
    "description" : "allowNullChecks"
  } ]
}, {
  "patternId" : "NoCloneChecker",
  "title" : "No Clone",
  "parameters" : [ ]
}, {
  "patternId" : "NoFinalizeChecker",
  "title" : "No Finalize",
  "parameters" : [ ]
}, {
  "patternId" : "CovariantEqualsChecker",
  "title" : "Covariant Equals",
  "parameters" : [ ]
}, {
  "patternId" : "StructuralTypeChecker",
  "title" : "Structural Type",
  "parameters" : [ ]
}, {
  "patternId" : "RegexChecker",
  "title" : "Regex",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  }, {
    "name" : "line",
    "description" : "line"
  } ]
}, {
  "patternId" : "NumberOfTypesChecker",
  "title" : "Number Of Types",
  "parameters" : [ {
    "name" : "maxTypes",
    "description" : "maxTypes"
  } ]
}, {
  "patternId" : "CyclomaticComplexityChecker",
  "title" : "Cyclomatic Complexity",
  "parameters" : [ {
    "name" : "maximum",
    "description" : "maximum"
  }, {
    "name" : "countCases",
    "description" : "countCases"
  } ]
}, {
  "patternId" : "UppercaseLChecker",
  "title" : "Uppercase L",
  "parameters" : [ ]
}, {
  "patternId" : "SimplifyBooleanExpressionChecker",
  "title" : "Simplify Boolean Expression",
  "parameters" : [ ]
}, {
  "patternId" : "IfBraceChecker",
  "title" : "If Brace",
  "parameters" : [ {
    "name" : "singleLineAllowed",
    "description" : "singleLineAllowed"
  }, {
    "name" : "doubleLineAllowed",
    "description" : "doubleLineAllowed"
  } ]
}, {
  "patternId" : "MethodLengthChecker",
  "title" : "Method Length",
  "parameters" : [ {
    "name" : "maxLength",
    "description" : "maxLength"
  }, {
    "name" : "ignoreComments",
    "description" : "ignoreComments"
  }, {
    "name" : "ignoreEmpty",
    "description" : "ignoreEmpty"
  } ]
}, {
  "patternId" : "MethodNamesChecker",
  "title" : "Method Names",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  }, {
    "name" : "ignoreRegex",
    "description" : "ignoreRegex"
  }, {
    "name" : "ignoreOverride",
    "description" : "ignoreOverride"
  } ]
}, {
  "patternId" : "MethodArgumentNamesChecker",
  "title" : "Method Argument Names",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  }, {
    "name" : "ignoreRegex",
    "description" : "ignoreRegex"
  } ]
}, {
  "patternId" : "NumberOfMethodsInTypeChecker",
  "title" : "Number Of Methods In Type",
  "parameters" : [ {
    "name" : "maxMethods",
    "description" : "maxMethods"
  } ]
}, {
  "patternId" : "PublicMethodsHaveTypeChecker",
  "title" : "Public Methods Have Type",
  "parameters" : [ {
    "name" : "ignoreOverride",
    "description" : "ignoreOverride"
  } ]
}, {
  "patternId" : "NewLineAtEofChecker",
  "title" : "New Line At Eof",
  "parameters" : [ ]
}, {
  "patternId" : "NoNewLineAtEofChecker",
  "title" : "No New Line At Eof",
  "parameters" : [ ]
}, {
  "patternId" : "WhileChecker",
  "title" : "While",
  "parameters" : [ ]
}, {
  "patternId" : "ThrowChecker",
  "title" : "Throw",
  "parameters" : [ ]
}, {
  "patternId" : "VarFieldChecker",
  "title" : "Var Field",
  "parameters" : [ ]
}, {
  "patternId" : "VarLocalChecker",
  "title" : "Var Local",
  "parameters" : [ ]
}, {
  "patternId" : "RedundantIfChecker",
  "title" : "Redundant If",
  "parameters" : [ ]
}, {
  "patternId" : "TokenChecker",
  "title" : "Token",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  } ]
}, {
  "patternId" : "DeprecatedJavaChecker",
  "title" : "Deprecated Java",
  "parameters" : [ ]
}, {
  "patternId" : "OverrideJavaChecker",
  "title" : "Override Java",
  "parameters" : [ ]
}, {
  "patternId" : "EmptyClassChecker",
  "title" : "Empty Class",
  "parameters" : [ ]
}, {
  "patternId" : "ClassTypeParameterChecker",
  "title" : "Class Type Parameter",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  } ]
}, {
  "patternId" : "UnderscoreImportChecker",
  "title" : "Underscore Import",
  "parameters" : [ ]
}, {
  "patternId" : "LowercasePatternMatchChecker",
  "title" : "Lowercase Pattern Match",
  "parameters" : [ ]
}, {
  "patternId" : "MultipleStringLiteralsChecker",
  "title" : "Multiple String Literals",
  "parameters" : [ {
    "name" : "allowed",
    "description" : "allowed"
  }, {
    "name" : "ignoreRegex",
    "description" : "ignoreRegex"
  } ]
}, {
  "patternId" : "ImportGroupingChecker",
  "title" : "Import Grouping",
  "parameters" : [ ]
}, {
  "patternId" : "NotImplementedErrorUsage",
  "title" : "Not Implemented Error Usage",
  "parameters" : [ ]
}, {
  "patternId" : "BlockImportChecker",
  "title" : "Block Import",
  "parameters" : [ ]
}, {
  "patternId" : "CurliesImportChecker",
  "title" : "Curlies Import",
  "parameters" : [ ]
}, {
  "patternId" : "ProcedureDeclarationChecker",
  "title" : "Procedure Declaration",
  "parameters" : [ ]
}, {
  "patternId" : "ForBraceChecker",
  "title" : "For Brace",
  "parameters" : [ {
    "name" : "singleLineAllowed",
    "description" : "singleLineAllowed"
  } ]
}, {
  "patternId" : "ForLoopChecker",
  "title" : "For Loop",
  "parameters" : [ ]
}, {
  "patternId" : "SpaceAfterCommentStartChecker",
  "title" : "Space After Comment Start",
  "parameters" : [ ]
}, {
  "patternId" : "ScalaDocChecker",
  "title" : "Scala Doc",
  "parameters" : [ {
    "name" : "ignoreRegex",
    "description" : "ignoreRegex"
  }, {
    "name" : "ignoreTokenTypes",
    "description" : "ignoreTokenTypes"
  }, {
    "name" : "ignoreOverride",
    "description" : "ignoreOverride"
  }, {
    "name" : "indentStyle",
    "description" : "indentStyle"
  } ]
}, {
  "patternId" : "DisallowSpaceAfterTokenChecker",
  "title" : "Disallow Space After Token",
  "parameters" : [ ]
}, {
  "patternId" : "DisallowSpaceBeforeTokenChecker",
  "title" : "Disallow Space Before Token",
  "parameters" : [ ]
}, {
  "patternId" : "EnsureSingleSpaceAfterTokenChecker",
  "title" : "Ensure Single Space After Token",
  "parameters" : [ ]
}, {
  "patternId" : "EnsureSingleSpaceBeforeTokenChecker",
  "title" : "Ensure Single Space Before Token",
  "parameters" : [ ]
}, {
  "patternId" : "NonASCIICharacterChecker",
  "title" : "Non ASCIICharacter",
  "parameters" : [ {
    "name" : "allowStringLiterals",
    "description" : "allowStringLiterals"
  } ]
}, {
  "patternId" : "IndentationChecker",
  "title" : "Indentation",
  "parameters" : [ {
    "name" : "tabSize",
    "description" : "tabSize"
  }, {
    "name" : "methodParamIndentSize",
    "description" : "methodParamIndentSize"
  }, {
    "name" : "classParamIndentSize",
    "description" : "classParamIndentSize"
  } ]
}, {
  "patternId" : "FieldNamesChecker",
  "title" : "Field Names",
  "parameters" : [ {
    "name" : "regex",
    "description" : "regex"
  }, {
    "name" : "objectFieldRegex",
    "description" : "objectFieldRegex"
  } ]
}, {
  "patternId" : "XmlLiteralChecker",
  "title" : "Xml Literal",
  "parameters" : [ ]
}, {
  "patternId" : "ImportOrderChecker",
  "title" : "Import Order",
  "parameters" : [ ]
}, {
  "patternId" : "PatternMatchAlignChecker",
  "title" : "Pattern Match Align",
  "parameters" : [ ]
}, {
  "patternId" : "TodoCommentChecker",
  "title" : "Todo Comment",
  "parameters" : [ {
    "name" : "words",
    "description" : "words"
  } ]
}, {
  "patternId" : "EmptyInterpolatedStringChecker",
  "title" : "Empty Interpolated String",
  "parameters" : [ ]
}, {
  "patternId" : "NamedArgumentChecker",
  "title" : "Named Argument",
  "parameters" : [ {
    "name" : "checkString",
    "description" : "checkString"
  }, {
    "name" : "ignoreMethod",
    "description" : "ignoreMethod"
  } ]
}, {
  "patternId" : "WhileBraceChecker",
  "title" : "While Brace",
  "parameters" : [ ]
}, {
  "patternId" : "CaseBraceChecker",
  "title" : "Case Brace",
  "parameters" : [ ]
} ]
